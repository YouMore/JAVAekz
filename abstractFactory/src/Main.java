//===========Методичка по пракам===============
// Паттерн «Абстрактная фабрика» – позволяет создавать семейства
//определенных объектов. Фактически является расширением
//паттерна «Фабричный метод».
// Порождающие паттерны проектирования отвечают за удобное
//безопасное создание объектов или групп объектов.

//==========Более подробное описание========================
// Паттерн абстрактная фабрика (Abstract Factory) относится к классу порождающих паттернов проектирования.
// Он предоставляет интерфейс для создания семейств взаимосвязанных объектов без указания
// конкретных классов этих объектов. Таким образом, абстрактная фабрика позволяет создавать объекты,
// которые зависят от других объектов, с минимальной связностью и максимальной гибкостью.
//
//Классы, связанные с реализацией абстрактной фабрики, обычно включают интерфейсы для создания семейств объектов,
// а также конкретные реализации этих интерфейсов для каждого семейства. Клиентский код,
// использующий абстрактную фабрику, обычно не знает о конкретных классах объектов, которые он создает,
// а лишь об их интерфейсах.
//
// В данном примере классы GermanFactory и RussianFactory представляют две конкретные реализации абстрактной фабрики
// CountryFactory, которые создают объекты типа Car и Food, соответственно. Интерфейсы Car и Food для создания
// конкретных объектов типа автомобиль и еда.
// Классы GermanCar, RussianCar, GermanFood и RussianFood представляют конкретные реализации этих интерфейсов
// для соответствующих стран.
public class Main {
    public static void main(String[] args) {
        System.out.println("================= Abstract factory pattern =================");
        CountryFactory[] carFactories = {new RussianFactory(), new GermanFactory()};
        for (CountryFactory factory : carFactories) {
            Food food = factory.createFood();
            Car car = factory.createCar();
            food.printProduct();
            car.printProduct();
        }
    }
}