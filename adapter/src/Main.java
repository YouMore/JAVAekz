//===========Методичка по пракам=======================
// Паттерн «Адаптер» позволяет какой-то объект с одним интерфейсом
//подстроить под другой интерфейс
//Шаблон проектирования «Адаптер» используется для связи двух несовместимых интерфейсов.
//Он позволяет объектам с несовместимыми интерфейсами работать вместе.
//Структурные паттерны проектирования играют не менее важную
//роль, нежели остальные паттерны. Они отвечают за построение удобной
//структуры и иерархии классов, которая делает код более поддерживаемым.

//=====================Более подробная инфа=================================
// Паттерн адаптер (Adapter) относится к классу структурных паттернов проектирования.
// Его цель - предоставить интерфейс, совместимый с уже существующим интерфейсом,
// но несовместимым с клиентским кодом.
// Адаптер оборачивает один интерфейс в другой, обеспечивая совместимость между ними.
//
// Отличие паттерна адаптер от паттерна декоратор заключается в том,
// что адаптер используется для изменения интерфейса класса,
// тогда как декоратор используется для добавления новых функций внутри объекта без изменения его интерфейса.

// В данном примере класс USBConnection представляет собой интерфейс, который несовместим с интерфейсом Network.
// Класс USB реализует интерфейс USBConnection
// Класс USBTethering реализует интерфейс Network и оборачивает объект типа USB,
// чтобы обеспечить совместимость с клиентским кодом. (адаптирует интерфейс USBConnection к нужному интерфейсу)
//
// В классе Main создается объект USB и отправляется сообщение через него с использованием объекта USBTethering.
// В результате сообщение успешно отправляется и принимается.

import java.nio.charset.Charset;

public class Main {
    public static void main(String[] args) {
        byte[] byteArray = { 112, 114, 105, 118, 101, 116 }; //privet
        String str = new String(byteArray, Charset.forName("UTF-8"));//112, 114, 105, 118, 101, 116
        USB usb1 = new USB(123);
        usb1.write(byteArray);
        USBTethering usb2 = new USBTethering(usb1);
        usb2.sendMessage(str);
        System.out.println(usb2.receiveMessage());
    }
}