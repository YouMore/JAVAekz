//Паттерн «Строитель» – разделяет создание объекта на отдельные
//шаги, а также позволяет использовать один и тот же код создания для
//получения различных представлений.
// Порождающие паттерны проектирования отвечают за удобное
//безопасное создание объектов или групп объектов.

//============Более подробное описание==========================
//Паттерн "Строитель" (Builder) — это порождающий паттерн проектирования,
// который позволяет создавать объекты пошагово. Он позволяет использовать один и тот же код строительства
// для получения разных представлений объектов. Паттерн "Строитель" отделяет конструирование сложного объекта от
// его представления, так что в результате одного и того же процесса конструирования могут получаться различные
// представления объекта.
//
//Ключевые участники паттерна:
//
//Строитель (Builder) — интерфейс или абстрактный класс, который определяет шаги конструирования объекта и
// абстрактные методы для получения результата.

//Конкретный строитель (Concrete Builder) — класс, который реализует интерфейс или наследует абстрактный класс
// строителя, предоставляя конкретную реализацию методов. у нас TowerBuilder

//Директор (Director) — класс, который управляет процессом конструирования объекта, вызывая методы на объекте строителе.

//Продукт (Product) — объект, который строитель создает. у нас Tower
public class Main {
    public static void main(String[] args) {
        System.out.println("================= Builder pattern =================");

        Builder builder = new TowerBuilder();
        Director director = new Director(builder);

        director.buildEiffel();
        Tower tower1 = builder.getResult();
        System.out.println(tower1);

        director.buildOstankino();
        Tower tower2 = builder.getResult();
        System.out.println(tower2);
    }
}